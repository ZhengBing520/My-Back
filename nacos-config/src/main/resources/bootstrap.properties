# Data ID中的alibaba-nacos-config-client：对应客户端的配置spring.cloud.nacos.config.prefix，
# 默认值为${spring.application.name}，即：服务名
#Data ID中的properties：对应客户端的配置spring.cloud.nacos.config.file-extension，默认值为properties
#Group的值DEFAULT_GROUP：对应客户端的配置spring.cloud.nacos.config.group，默认值为DEFAULT_GROUP
spring.application.name=alibaba-nacos-discovery-client
server.port=8088
spring.cloud.nacos.config.server-addr=127.0.0.1:8848
# 原始规则： ${spring.cloud.nacos.config.prefix}-${spring.profile.active}.${spring.cloud.nacos.config.file-extension}
# dev被删了的话，就加载默认配置，如果dev在启动完之后删除，就不会改变（dev的配置已经被加载到内存中了）
spring.profiles.active=dev
# 通过group来加载配置
#spring.cloud.nacos.config.group=DEV_GROUP
# 通过namespace加载配置（官方推荐） C
spring.cloud.nacos.config.namespace=f1005b3c-9ff9-42ba-a7f6-f4f7649e4496
spring.cloud.nacos.config.file-extension=yml
spring.cloud.nacos.config.group=DEFAULT_GROUP
# 加载多个配置 B
#spring.cloud.nacos.config.ext-config[0].data-id=actuator.properties
#spring.cloud.nacos.config.ext-config[0].group=DEFAULT_GROUP
#spring.cloud.nacos.config.ext-config[0].refresh=true
#spring.cloud.nacos.config.ext-config[1].data-id=log.properties
#spring.cloud.nacos.config.ext-config[1].group=DEFAULT_GROUP
#spring.cloud.nacos.config.ext-config[1].refresh=true
# 共享多个配置  A -> 与上面使用的配置内容是等价的：
# spring.cloud.nacos.config.shared-dataids参数用来配置多个共享配置的Data Id，多个的时候用用逗号分隔
# spring.cloud.nacos.config.refreshable-dataids参数用来定义哪些共享配置的Data Id在配置变化时，应用中可以动态刷新，
# 多个Data Id之间用逗号隔开。如果没有明确配置，默认情况下所有共享配置都不支持动态刷新
#spring.cloud.nacos.config.shared-dataids=actuator.properties,log.properties
#spring.cloud.nacos.config.refreshable-dataids=actuator.properties,log.properties
# 配置加载顺序： A < B < C